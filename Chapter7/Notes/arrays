/* 
int [] nums; <- declare an array to reference
nums = new int[5] <- create an array of 5 ints referenced by variable name; all set to 0 ex: nums[1]= 0 and start from 0-4 which is 5 int; nums[5] DNE

nums[1] = nums[2]+nums[3]+nums[4] can combine and assign to another 

Scanner keyb = new Scanner(System.in);
int sum=0;
for (int i = 0; i < 5; i++)
{
    System.out.println("Enter a number");
    nums[i]= keyb.nextInt();
    sum += nums[i];
}

can initialize an array elements with a random number generator
final int SIZE = 20; 
Random rnd = new Random();
int[] nums2 = new int[SIZE]; <- nums2[0-19] bc SIZE is 20
for (int i = 0; i < SIZE; i++)
{
    nums2[i]=rnd.nextInt(100); <- 0 and 99
}

int count = 0;
while (count < nums2.length) 
{
    System.out.print(nums.[count]+" ");
    count++;
}

another way of declaring array
double [] nums3 = {};

enhanced for loop
value is the variable:followed by the name of the array (nums2) // ex: nums2: 4, 3, 5, 6, 7 
then the first time the loop happens, 4 goes into the parameter, then 3, then 5, etc.

int evens=0;
for (int value:nums2) 
{
    if (value % 2 == 0)
    {
        evens++;
    }
}

COPYING ARRAYS
reference copy
int [] a = {2, 3, 4};
int [] b = a; // both a and b are pointing to the same object
b[1] = 1000; {2, 1000, 4} for both a and b because they're both referencing the same obj

copy array into other arrays; not reference
int [] c = new int [a.length]; <- make array c has same size as array a
for (int i=0; i<a.length; i++)
{
    c[i]=a[i];
}
set each index = to each other in each array

METHODS
public static void printValue(int x)
{
    System.out.println(x + "/n");
}

printValue(a[2]); <- pass a single array value index (2nd one) to the method

public static void printValues(int [] x)
{
    for (int item : x)
    {
        System.out.println(item + " "); 
    }
}
iterates through array x and sets it to item;
printValues(a); <- prints whole array


public static int largest(int [] x) // x = 1, 3, 5, 7, 4
{
    int largest = x[0]; <- set to first index
    for (int value : x) 
    {
        if (value > largest)
        {
            largest = value;
        }
    }
        return largest;
}

ARRAY OF STRINGS
String [] s = new String[3];
System.out.println(s[0]); <- would be "null"
String [] names = { "Jim", "Kim", "Tim"}; 
System.out.println(names[0].charAt(1)); <- prints i from "J[i]m"
System.out.println(names[1].length()); <- length of 3 for "Kim"

TWO DIMENSIONAL ARRAYS
double [][] grades;
grades = new double [3][4]; <- 3 rows 4 columns
grades[0][0] = 60; <- grade 0 0 row 0 column 0
grades[1][0] = 70; grades [1][1]=90.3;


60
70      90.3


grades.length returns the number of rows
for ( int row = 0; row < grades.length; row++) <- start from row 0
{
    for (int col=0; col< grades[row].length; col++) // grades[0].length = the length of row 0
}

int [][] values= {{2,3}, {5,6}, {8,9}, {4,5}};



*/ 